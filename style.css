/* 
Color pallete. This section defines variables for the color pallete,
so that we can refer to particular colors by name instead of hexadecimal values.
This is applied to the 'root' psuedo-element, which just means that these color
variables are available to be used anywhere in our html document
*/
:root {
    --white: #FFFFFF;
    --black: #000000;
    --colour1: #0B1D51;
    --colour2: #bacde2;
    --colour3: #A1869E;
    --colour4: #BBADA0;
    --colour5: #D1C6AD;
}

/* The body of the document has a white background and is set up as a vertical flexbox. */
body {
    background-color: var(--white);
    display: flex;
    flex-direction: column;
    align-items: center;
}

/* Defines the main container size, we are limiting to 72em max */
.main-container {
    max-width: 72em;
    font-family: Inter;
}

/* Here we define the aspects of style of our elements other than their grid layout */
.banner {
    background-color: var(--colour2);
    color: var(--white);
    padding: 1em;
}

.banner-title {
    font-size: 3em;
}

.banner-title img {
    max-width: 100%;
    max-height: 100%;
}

.banner-subtitle {
    font-size: 2.25em;
    text-align: center;
}

.strange-weather-card {
    /* TODO: style the card as a column based flexbox with rounded corners */
    display: flex;
    flex-direction: column;
    background-color: var(--white);
    border-radius: 1em;
    overflow: hidden;
}

/* this is the equivalent of setting the image rectangle to "Fill Container" in Figma */ 
.strange-weather-card-image {
    width: 100%;
    height: 100%;
}

/*
.team-member-card-blurb {
    /* TODO: style the blurb with padding
    color: var(--white);
    padding: 0.5em;
}
*/
.our-clients-title {
    background-color: var(--colour5);
    color: var(--colour3);
    padding: 1em;
    border-radius: 1em;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    font-size: 3em;
}

/* this is the equivalent of setting the image rectangle to "Fill Container" in Figma */ 
.client-icon {
    width: 100%;
}
/* now we create names for the grid areas for specific elements */
#banner {
    grid-area: ban;
}

#strangeWeather1 {
    grid-area: ci1;
}

#strangeWeather2 {
    grid-area: ci2;
}

#strangeWeather3 {
    grid-area: ci3;
}

#protestImage1 {
    grid-area: pi1;
}

#protestImage2 {
    grid-area: pi2;
}

#protestImage3 {
    grid-area: pi3;
}

#clientIcon4 {
    grid-area: ci4;
}

#clientIcon5 {
    grid-area: ci5;
}

#clientIcon6 {
    grid-area: ci6;
}

#clientIcon7 {
    grid-area: ci7;
}

#clientIcon8 {
    grid-area: ci8;
}

/* Use a flexible layout grid */
.main-container {
    display: grid;
    column-gap: 1em;
}

/* 
Responsive Layout breakpoints. We start 'mobile-first' i.e. we define how the layout should look
for the smallest screen sizes. In this case we want a single column that spans the main container.
Because this CSS definition comes first, it will apply by default. Then we override it below with 
media queries for progressively bigger screen widths
*/
.main-container {
    grid-template:
            "ban ban ban ban" minmax(8em, auto)
            " .   .   .   . " minmax(2em, auto)
            "ci1 ci1 ci1 ci1" minmax(32em, auto)
            " .   .   .   . " minmax(1em, auto)
            "ci2 ci2 ci2 ci2" minmax(32em, auto)
            " .   .   .   . " minmax(1em, auto)
            "ci3 ci3 ci3 ci3" minmax(32em, auto)
            " .   .   .   . " minmax(1em, auto)
            "pi1 pi1 pi2 pi2" minmax(8em, auto)
            " .   .   .   . " minmax(1em, auto)
            " .  pi3 pi3  . " minmax(8em, auto)

}

@media (min-width: 50em) {
    .main-container {
        grid-template:
            "ban ban ban ban ban ban ban ban" minmax(8em, auto)
            " .   .   .   .   .   .   .   . " minmax(2em, auto)
            "ci1 ci1 ci1 ci1 ci1 ci1 ci1 ci1" minmax(32em, auto)
            " .   .   .   .   .   .   .   . " minmax(2em, auto)
            "pi1 pi1 pi1 pi1 pi2 pi2 pi2 pi2" minmax(8em, auto)
            " .   .   .   .   .   .   .   . " minmax(1em, auto)
            "ci2 ci2 ci2 ci2 ci2 ci2 ci2 ci2" minmax(8em, auto)
            " .   .   .   .   .   .   .   . " minmax(1em, auto)            
            " .   .  pi3 pi3 pi3 pi3  .   . " minmax(2em, auto)
            " .   .   .   .   .   .   .   . " minmax(1em, auto)            
            "ci3 ci3 ci3 ci3 ci3 ci3 ci3 ci3" minmax(8em, auto)
    }          
}

@media (min-width: 75em) {
    .main-container {
        grid-template:
            "ban ban ban ban ban ban ban ban ban ban ban ban" minmax(8em, auto)
            " .   .   .   .   .   .   .   .   .   .   .   . " minmax(2em, auto)
            "ci1 ci1 ci1 ci1 ci1 ci1 ci1 ci1 pi2 pi2 pi2 pi2" minmax(22em, auto)
            " .   .   .   .   .   .   .   .   .   .   .   . " minmax(2em, auto)
            "pi1 pi1 pi1 pi1 ci3 ci3 ci3 ci3 ci3 ci3 ci3 ci3" minmax(4em, auto)
            " .   .   .   .   .   .   .   .   .   .   .   . " minmax(2em, auto)
            "ci2 ci2 ci2 ci2 ci2 ci2 ci2 ci2 pi3 pi3 pi3 pi3" minmax(8em, auto)
            " .   .   .   .   .   .   .   .   .   .   .   . " minmax(1em, auto)
    }
}
